'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withBreakpoints = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
/* globals ReactClass */


var breakpointsShape = _react.PropTypes.shape({
  sm: _react.PropTypes.number,
  md: _react.PropTypes.number,
  lg: _react.PropTypes.number
});

var BreakpointProvider = function (_Component) {
  _inherits(BreakpointProvider, _Component);

  function BreakpointProvider() {
    _classCallCheck(this, BreakpointProvider);

    return _possibleConstructorReturn(this, (BreakpointProvider.__proto__ || Object.getPrototypeOf(BreakpointProvider)).apply(this, arguments));
  }

  _createClass(BreakpointProvider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      var _props$breakpoints = this.props.breakpoints,
          propsBreakpoints = _props$breakpoints === undefined ? {} : _props$breakpoints;
      var _context$breakpoints = this.context.breakpoints,
          contextBreakpoints = _context$breakpoints === undefined ? {} : _context$breakpoints;


      return {
        breakpoints: _extends({}, _utils.defaultBreakpoints, contextBreakpoints, propsBreakpoints)
      };
    }
  }, {
    key: 'render',
    value: function render() {
      return _react.Children.only(this.props.children);
    }
  }]);

  return BreakpointProvider;
}(_react.Component);

BreakpointProvider.propTypes = {
  children: _react.PropTypes.node,
  breakpoints: breakpointsShape
};
BreakpointProvider.contextTypes = {
  breakpoints: breakpointsShape
};
BreakpointProvider.childContextTypes = {
  breakpoints: breakpointsShape
};
exports.default = BreakpointProvider;
var withBreakpoints = exports.withBreakpoints = function withBreakpoints(WrappedComponent
// eslint-disable-next-line react/no-multi-comp
) {
  var _class, _temp;

  return _temp = _class = function (_Component2) {
    _inherits(Breakpoints, _Component2);

    function Breakpoints() {
      _classCallCheck(this, Breakpoints);

      return _possibleConstructorReturn(this, (Breakpoints.__proto__ || Object.getPrototypeOf(Breakpoints)).apply(this, arguments));
    }

    _createClass(Breakpoints, [{
      key: 'render',
      value: function render() {
        var breakpoints = this.context.breakpoints;


        return _react2.default.createElement(WrappedComponent, _extends({}, this.props, { breakpoints: breakpoints }));
      } // eslint-disable-line  react/prefer-stateless-function

    }]);

    return Breakpoints;
  }(_react.Component), _class.contextTypes = {
    breakpoints: breakpointsShape
  }, _temp;
};